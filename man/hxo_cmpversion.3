.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "HXO_CMPVERSION" "3" "September 2024" "HXO Library Definitions" ""
.hy
.SH NAME
.PP
hxo_cmpversion \[en] compares two semantic versions.
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <hxo-user.h>              //Contains all the definitions needed to get started

int hxo_cmpversion(const char *current_version, const char *needed_version);
\f[R]
.fi
.SH DESCRIPTION
.PP
\f[C]hxo_cmpversion()\f[R] .
The \f[I]current version\f[R] string pointer is passed through the
\f[B]first argument\f[R], followed by the \f[I]target version\f[R]
string pointer.
.IP \[bu] 2
NOTE: Only the major(x), minor(y), and patch(z) is compared, and any
suffix like \f[C]-beta\f[R], \f[C]-rc0\f[R] will be ignored.
.SH RETURN VALUES
.IP \[bu] 2
If both versions match \f[C]hxo_cmpversion()\f[R] returns 0.
.IP \[bu] 2
If the current version is greater than the target version it returns 1.
.IP \[bu] 2
If the target/needed version is greater that the current version it
returns -1.
.SH EXPANDS TO
.IP
.nf
\f[C]
#include <stdio.h>

static inline int hxo_cmpversion(const char *current_version, const char *needed_version) {
    int v1_major, v1_minor, v1_patch;
    int v2_major, v2_minor, v2_patch;

    // Parse the version strings
    sscanf(current_version, \[dq]%d.%d.%d\[dq], &v1_major, &v1_minor, &v1_patch);
    sscanf(needed_version, \[dq]%d.%d.%d\[dq], &v2_major, &v2_minor, &v2_patch);

    // Compare major version
    if (v1_major > v2_major) return 1;
    if (v1_major < v2_major) return -1;

    // Compare minor version
    if (v1_minor > v2_minor) return 1;
    if (v1_minor < v2_minor) return -1;

    // Compare patch version
    if (v1_patch > v2_patch) return 1;
    if (v1_patch < v2_patch) return -1;

    // Versions are equal
    return 0;
}
\f[R]
.fi
.SH SEE ALSO
.PP
hxo-loader(1) \[en] general guide
.PD 0
.P
.PD
hxo-devl(3) \[en] hxo module development guide
.PD 0
.P
.PD
hxo_createthread(3) \[en] creates a thread.
.SH AUTHORS
bitwaree <bitware@duck.com>.
